package Menu;

import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import Payment.Booking;
import User.Customer;
import User.User;
import javax.swing.JTextField;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;

import javax.swing.JComboBox;
import javax.swing.ImageIcon;
import java.awt.Color;
import javax.swing.SwingConstants;

public class editBooking {

	private JFrame frame;
	private User currUser = new User("", "", "", "");
	private JTable bookingTable;
	private JScrollPane scrollPane;
	private JLabel lblEditBookings;
	private Calendar schedule = Calendar.getInstance();
	DateFormat dateformat = new SimpleDateFormat("EEEE ,dd-MM-YYYY");
	private JComboBox comboBox;
	String dateBook = dateformat.format(schedule.getTime());
	private String cUUID;
	private String sUUID;
	private String sName;
	private String serviceOrder;
	private String dateSchedule;
	private int selectedLine;
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_2;

	public editBooking(User currUser) {
		this.currUser = currUser;
		initialize();
		if(((Customer)currUser).booklist.size() == 0){
			JOptionPane.showMessageDialog(null, "You have no Bookings Data to show!");
			frame.dispose();
			new manageMenu(currUser);
		} else {
			load_table();
		}
	}
	
	public void load_table(){
		
		DefaultTableModel model = new DefaultTableModel();
		model.addColumn("No.");
		model.addColumn("Customer ID");
		model.addColumn("Stylist ID");
		model.addColumn("Stylist Name");
		model.addColumn("Service Order");
		model.addColumn("Date Schedule");
		
		int no = 1;
		
		for(Booking bl : ((Customer)currUser).booklist){
			model.addRow(new Object[]{
					no++,
					bl.getCustomerID(),
					bl.getStylistID(),
					bl.getStylistName(),
					bl.getServiceOrder(),
					bl.getDateSchedule()
		
			});
		}
		
		bookingTable.setModel(model);
		bookingTable.getColumnModel().getColumn(0).setPreferredWidth(50);
		bookingTable.getColumnModel().getColumn(1).setPreferredWidth(100);
		bookingTable.getColumnModel().getColumn(2).setPreferredWidth(100);
		bookingTable.getColumnModel().getColumn(3).setPreferredWidth(50);
		bookingTable.getColumnModel().getColumn(4).setPreferredWidth(50);
		bookingTable.getColumnModel().getColumn(5).setPreferredWidth(50);
		bookingTable.setAutoResizeMode(0);
	}

	private void initialize() {
		frame = new JFrame();
		frame.getContentPane().setBackground(new Color(255, 255, 255));
		frame.setBounds(300, 120, 749, 459);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setUndecorated(true);
		frame.getContentPane().setLayout(null);
		
		scrollPane = new JScrollPane();
		scrollPane.setBounds(59, 68, 299, 295);
		frame.getContentPane().add(scrollPane);
		bookingTable = new JTable();
		bookingTable.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				selectedLine = bookingTable.getSelectedRow();
				cUUID = bookingTable.getValueAt(selectedLine, 1).toString();
				sUUID = bookingTable.getValueAt(selectedLine, 2).toString();
				sName = bookingTable.getValueAt(selectedLine, 3).toString();
				serviceOrder = bookingTable.getValueAt(selectedLine, 4).toString();
				dateSchedule = bookingTable.getValueAt(selectedLine, 5).toString();
				comboBox.setSelectedItem(dateSchedule);
			}
		});
		scrollPane.setViewportView(bookingTable);
		
		lblEditBookings = new JLabel("Edit Bookings");
		lblEditBookings.setFont(new Font("Century Gothic", Font.PLAIN, 21));
		lblEditBookings.setBounds(446, 41, 196, 30);
		frame.getContentPane().add(lblEditBookings);
		
		comboBox = new JComboBox();
		comboBox.setBounds(485, 124, 196, 30);
		DateFormat dateformat = new SimpleDateFormat("EEEE ,dd-MM-YYYY");
		
		String[] scheduleList = new String[15];
		
		for(int i=1; i<=7; i++)
		{
			schedule.add(Calendar.DAY_OF_YEAR, 1);
			
			scheduleList[i] = dateformat.format(schedule.getTime());
		}
		for(int i=1; i<=7; i++){			
			comboBox.addItem(scheduleList[i]);
		}
		comboBox.setSelectedItem(dateSchedule);
		frame.getContentPane().add(comboBox);
		
		JLabel lblChangeSchedule = new JLabel("Change Schedule");
		lblChangeSchedule.setBounds(485, 99, 101, 14);
		frame.getContentPane().add(lblChangeSchedule);
		
		JButton btnUpdateBooking = new JButton("Update Booking");
		btnUpdateBooking.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				
				
				ArrayList <Booking> currUserBooking = ((Customer)currUser).getBooklist();
				int transactionsize = currUserBooking.size();
				
				boolean isDateExist = false;
				
				for(int i=0; i<transactionsize; i++) {
					
					String curDate = currUserBooking.get(i).getDateSchedule();
					String dateSchedule = comboBox.getSelectedItem().toString();
					
					if(curDate.equals(dateSchedule)) {
						isDateExist = true;
						break;
					}
				}
				
				if(isDateExist){
					JOptionPane.showMessageDialog(null, "You already make a booking that day!");
				}
				else {
					dateSchedule = comboBox.getSelectedItem().toString();
					if(!dateSchedule.equals("")){
					Booking tempBook = new Booking(cUUID, sUUID, sName, serviceOrder, dateSchedule, dateBook);
					((Customer)currUser).booklist.set(selectedLine, tempBook);
					load_table();
				} else {
					JOptionPane.showMessageDialog(null, "Please pick a replacement date!");
				}
				}
					
			}
		});
		btnUpdateBooking.setToolTipText("Update your Booking");
		btnUpdateBooking.setBounds(514, 199, 124, 39);
		frame.getContentPane().add(btnUpdateBooking);
		
		JButton btnDeleteBooking = new JButton("Cancel Booking");
		btnDeleteBooking.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				((Customer)currUser).booklist.remove(selectedLine);
				JOptionPane.showMessageDialog(null, "Receipt number #" + selectedLine + " has been removed!");
				load_table();
			}
		});
		btnDeleteBooking.setToolTipText("Delete your booking...");
		btnDeleteBooking.setBounds(514, 249, 124, 39);
		frame.getContentPane().add(btnDeleteBooking);
		
		lblNewLabel = new JLabel("");
		lblNewLabel.setBounds(470, 349, 46, 14);
		frame.getContentPane().add(lblNewLabel);
		
		lblNewLabel_1 = new JLabel("");
		lblNewLabel_1.setIcon(new ImageIcon("C:\\Users\\HP\\Documents\\Bahan Belajar\\ProjectOOP\\white-minimalist-Large-1.jpg"));
		lblNewLabel_1.setBounds(0, -37, 410, 548);
		frame.getContentPane().add(lblNewLabel_1);
		
		lblNewLabel_2 = new JLabel("");
		lblNewLabel_2.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				frame.dispose();
				new manageMenu(currUser);
			}
			
		});
		lblNewLabel_2.setHorizontalAlignment(SwingConstants.CENTER);
		lblNewLabel_2.setIcon(new ImageIcon("C:\\Users\\HP\\Documents\\Bahan Belajar\\ProjectOOP\\x-button (1).png"));
		lblNewLabel_2.setBounds(470, 392, 66, 44);
		frame.getContentPane().add(lblNewLabel_2);
		
		frame.setResizable(false);
		frame.setVisible(true);
	}
}
